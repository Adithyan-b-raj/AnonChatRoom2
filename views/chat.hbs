<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Anonymous Chat</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <div id="usernameModal" class="username-modal">
        <div class="username-form">
            <h2>Join Anonymous Chat</h2>
            <div class="form-group">
                <label for="usernameInput">Choose your username:</label>
                <input type="text" id="usernameInput" placeholder="Enter your username" maxlength="20" required>
            </div>
            <button id="joinChatBtn" class="btn-primary">Join Chat</button>
        </div>
    </div>

    <div id="chatContainer" class="chat-container" style="display: none;">
        <header class="chat-header">
            <div class="room-info">
                <h2>Anonymous Chat</h2>
                <span id="userCount">0 users online</span>
            </div>
            <div class="controls">
                <span id="currentUsername"></span>
            </div>
        </header>
        
        <div class="chat-area">
            <div id="messages" class="messages"></div>
            <div id="typingIndicator" class="typing-indicator"></div>
        </div>
        
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type your message..." maxlength="500">
            <button id="sendBtn" class="btn-primary">Send</button>
        </div>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Configure Socket.IO with better reconnection settings
        const socket = io({
            autoConnect: false,
            reconnection: true,
            reconnectionDelay: 1000,
            reconnectionAttempts: 10,
            timeout: 20000,
            forceNew: true
        });
        
        let username = localStorage.getItem('chatUsername') || '';
        let isConnected = false;
        let hasJoinedChat = false;
        
        const usernameModal = document.getElementById('usernameModal');
        const chatContainer = document.getElementById('chatContainer');
        const usernameInputField = document.getElementById('usernameInput');
        const joinChatBtn = document.getElementById('joinChatBtn');
        const currentUsernameSpan = document.getElementById('currentUsername');
        const messagesDiv = document.getElementById('messages');
        const messageInput = document.getElementById('messageInput');
        const sendBtn = document.getElementById('sendBtn');
        const userCountSpan = document.getElementById('userCount');
        const typingIndicator = document.getElementById('typingIndicator');
        
        let typingTimer;
        let isTyping = false;
        
        // Check if user already has a saved username
        if (username) {
            usernameInputField.value = username;
            // Auto-join if returning user
            joinChat();
        } else {
            // Focus username input for new users
            usernameInputField.focus();
        }
        
        // Join chat function
        function joinChat() {
            const enteredUsername = usernameInputField.value.trim();
            if (!enteredUsername) {
                alert('Please enter a username');
                return;
            }
            
            username = enteredUsername;
            // Save username to localStorage for persistence
            localStorage.setItem('chatUsername', username);
            currentUsernameSpan.textContent = `Logged in as: ${username}`;
            
            // Hide modal and show chat
            usernameModal.style.display = 'none';
            chatContainer.style.display = 'flex';
            
            // Connect and join the chat
            if (!socket.connected) {
                socket.connect();
            }
            
            hasJoinedChat = true;
            
            // Focus message input
            messageInput.focus();
        }
        
        // Join chat on button click
        joinChatBtn.addEventListener('click', joinChat);
        
        // Join chat on Enter key
        usernameInputField.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                joinChat();
            }
        });
        
        // Socket connection events
        socket.on('connect', () => {
            console.log('Connected to server');
            isConnected = true;
            
            // Auto-rejoin chat if we were previously connected
            if (hasJoinedChat && username) {
                socket.emit('join-chat', { username });
            }
            
            // Hide any reconnection messages
            const reconnectMsg = document.querySelector('.reconnect-message');
            if (reconnectMsg) {
                reconnectMsg.remove();
            }
        });
        
        socket.on('disconnect', (reason) => {
            console.log('Disconnected from server:', reason);
            isConnected = false;
            
            // Show reconnection message if it was unexpected
            if (hasJoinedChat && reason !== 'io client disconnect') {
                showReconnectMessage();
            }
        });
        
        socket.on('reconnect', () => {
            console.log('Reconnected to server');
            if (hasJoinedChat && username) {
                socket.emit('join-chat', { username });
            }
        });
        
        function showReconnectMessage() {
            // Remove any existing reconnect message
            const existingMsg = document.querySelector('.reconnect-message');
            if (existingMsg) {
                existingMsg.remove();
            }
            
            const reconnectDiv = document.createElement('div');
            reconnectDiv.className = 'reconnect-message';
            reconnectDiv.innerHTML = `
                <div style="
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #ff6b6b;
                    color: white;
                    padding: 10px 15px;
                    border-radius: 5px;
                    z-index: 1001;
                    font-size: 14px;
                ">
                    Reconnecting to chat...
                </div>
            `;
            document.body.appendChild(reconnectDiv);
        }
        
        // Handle page visibility changes
        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'visible' && hasJoinedChat && !socket.connected) {
                // Reconnect when page becomes visible again
                socket.connect();
            }
        });
        
        // Listen for messages
        socket.on('message', (data) => {
            addMessage(data, 'message');
        });
        
        // Listen for previous messages
        socket.on('previous-messages', (messages) => {
            messages.forEach(msg => addMessage(msg, 'message'));
            scrollToBottom();
        });
        
        // Listen for user events
        socket.on('user-joined', (data) => {
            addMessage(data, 'system');
        });
        
        socket.on('user-left', (data) => {
            addMessage(data, 'system');
        });
        
        // Update user count
        socket.on('user-count', (count) => {
            userCountSpan.textContent = `${count} user${count !== 1 ? 's' : ''} online`;
        });
        
        // Handle typing indicators
        socket.on('user-typing', (data) => {
            if (data.isTyping) {
                typingIndicator.textContent = `${data.username} is typing...`;
            } else {
                typingIndicator.textContent = '';
            }
        });
        
        function addMessage(data, type) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}`;
            
            if (type === 'system') {
                messageDiv.innerHTML = `
                    <span class="system-message">${data.message}</span>
                    <span class="timestamp">${data.timestamp}</span>
                `;
            } else {
                const isOwnMessage = data.username === username;
                messageDiv.className += isOwnMessage ? ' own' : '';
                messageDiv.innerHTML = `
                    <div class="message-header">
                        <span class="username">${data.username}</span>
                        <span class="timestamp">${data.timestamp}</span>
                    </div>
                    <div class="message-content">${escapeHtml(data.message)}</div>
                `;
            }
            
            messagesDiv.appendChild(messageDiv);
            scrollToBottom();
        }
        
        function scrollToBottom() {
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        function sendMessage() {
            const message = messageInput.value.trim();
            if (message) {
                socket.emit('new-message', { message });
                messageInput.value = '';
                
                // Stop typing indicator
                if (isTyping) {
                    socket.emit('typing', { isTyping: false });
                    isTyping = false;
                }
            }
        }
        
        // Send message on button click
        sendBtn.addEventListener('click', sendMessage);
        
        // Send message on Enter key
        messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
        
        // Typing indicator
        messageInput.addEventListener('input', () => {
            if (!isTyping) {
                socket.emit('typing', { isTyping: true });
                isTyping = true;
            }
            
            clearTimeout(typingTimer);
            typingTimer = setTimeout(() => {
                socket.emit('typing', { isTyping: false });
                isTyping = false;
            }, 1000);
        });
        
        // Handle page focus/blur for mobile apps
        window.addEventListener('focus', () => {
            if (hasJoinedChat && !socket.connected) {
                socket.connect();
            }
        });
        
        // Keep connection alive with periodic ping
        setInterval(() => {
            if (socket.connected && hasJoinedChat) {
                socket.emit('ping');
            }
        }, 30000); // Ping every 30 seconds
        
        // Only disconnect on actual page unload, not background
        window.addEventListener('beforeunload', () => {
            // Don't force disconnect - let Socket.IO handle it naturally
            if (isTyping) {
                socket.emit('typing', { isTyping: false });
            }
        });
    </script>
</body>
</html>